name: 'Elixir CI'
description: 'Runs Elixir compile, test, dialyzer commands'
inputs:
  mix-env:
    description: 'MIX ENV variable'
    required: false
    default: "test"
  working-directory:
    description: 'Working directory'
    required: false
    default: '.'
  release:
    description: "Wether to run mix release and upload artifact or not"
    required: false
    default: 'False'
  release-name:
    description: "The name of the uploaded release"
    required: false
    default: "release"
  release-upload:
    description: "Wether to upload the artifact or not"
    required: false
    default: 'False'

runs:
  using: 'composite'
  steps:
  - name: Restore dependencies cache
    id: mix-cache
    uses: actions/cache@v2
    with:
      path: |
        ${{inputs.working-directory}}/deps
        ${{inputs.working-directory}}/_build
        ${{inputs.working-directory}}/priv/plts
      key: ${{ runner.os }}-mix-${{ inputs.mix-env }}-${{ hashFiles(env.HASH_FILES_PATH) }}
      restore-keys: |
        ${{ runner.os }}-mix-${{ inputs.mix-env }}
        ${{ runner.os }}-mix
    env:
      HASH_FILES_PATH: "${{inputs.working-directory}}/mix.lock"

  - name: Install dependencies
    if: steps.mix-cache.outputs.cache-hit != 'true'
    run: mix deps.get
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    env:
      MIX_ENV: ${{ inputs.mix-env }}

  - name: Compile prod with warnings as errors
    run: mix compile --warnings-as-errors
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    env:
      MIX_ENV: ${{ inputs.mix-env }}

  - name: Check formatting
    run: mix format --check-formatted
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    env:
      MIX_ENV: ${{ inputs.mix-env }}

  - name: Check dependencies
    run: mix deps.unlock --check-unused
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    env:
      MIX_ENV: ${{ inputs.mix-env }}

  - name: Credo
    run: mix credo
    if: ${{ inputs.mix-env != 'prod' }}
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    env:
      MIX_ENV: ${{ inputs.mix-env }}

  - name: Dialyzer
    run: mix dialyzer
    if: ${{ inputs.mix-env != 'prod' }}
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    env:
      MIX_ENV: ${{ inputs.mix-env }}

  - name: Tests
    run: mix test
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    env:
      MIX_ENV: ${{ inputs.mix-env }}

  - name: Release
    if: ${{ inputs.release == 'True' }}
    run: mix release --overwrite
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    env:
      MIX_ENV: ${{ inputs.mix-env }}

  - uses: actions/upload-artifact@v2
    if: ${{ inputs.release-upload == 'True' }}
    with:
      name: ${{ inputs.release-name }}
      path: ${{ inputs.working-directory }}/_build/${{ inputs.mix-env }}/rel
