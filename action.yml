name: 'Elixir CI'
description: 'Runs Elixir compile, test, dialyzer commands'
inputs:
  mix-env:
    description: 'MIX_ENV variable'
    required: false
    default: "test"
  mix-env-test:
    description: 'MIX_ENV variable for tests'
    required: false
    default: "test"
  run-tests:
    description: 'Wether to run mix test or not'
    required: false
    default: 'True'
  tests-flags:
    description: 'Flags to append to the mix test command (e.g. --only tag or --no-start, etc.)'
    required: false
    default: ''
  working-directory:
    description: 'Working directory'
    required: false
    default: '.'
  release:
    description: "Wether to run mix release and upload artifact or not"
    required: false
    default: 'False'
  release-name:
    description: "The name of the uploaded release"
    required: false
    default: "release"
  release-upload:
    description: "Wether to upload the artifact or not"
    required: false
    default: 'False'
  build-cache-key-suffix:
    description: "Suffix to add to the build cache key"
    required: false
    default: ""
  plt-cache-key-suffix:
    description: "Suffix to add to the plt cache key"
    required: false
    default: ""
  plt-restore-cache:
    description: "If false it won't retrieve cache from other restore keys"
    required: false
    default: "True"

runs:
  using: 'composite'
  steps:
  - name: Restore build and dependencies cache
    id: mix-build-dep-cache
    uses: actions/cache@v2
    with:
      path: |
        ${{inputs.working-directory}}/deps
        ${{inputs.working-directory}}/_build
      key: ${{ runner.os }}-mix-build-dep-${{ inputs.mix-env }}-${{ hashFiles(env.HASH_FILES_PATH) }}${{ inputs.build-cache-key-suffix }}
    env:
      HASH_FILES_PATH: "${{inputs.working-directory}}/mix.lock"

  - name: Restore plt cache
    if: inputs.plt-restore-cache != 'False'
    id: mix-plt-cache
    uses: actions/cache@v2
    with:
      path: |
        ${{inputs.working-directory}}/priv/plts
      key: ${{ runner.os }}-mix-plt-${{ inputs.mix-env }}-${{ hashFiles(env.HASH_FILES_PATH) }}${{ inputs.plt-cache-key-suffix }}
      restore-keys: |
        ${{ runner.os }}-mix-plt-${{ inputs.mix-env }}
        ${{ runner.os }}-mix-plt
    env:
      HASH_FILES_PATH: "${{inputs.working-directory}}/mix.lock"

  - name: Restore plt cache
    if: inputs.plt-restore-cache == 'False'
    id: mix-plt-cache-no-restore
    uses: actions/cache@v2
    with:
      path: |
        ${{inputs.working-directory}}/priv/plts
      key: ${{ runner.os }}-mix-plt-${{ inputs.mix-env }}-${{ hashFiles(env.HASH_FILES_PATH) }}${{ inputs.plt-cache-key-suffix }}
    env:
      HASH_FILES_PATH: "${{inputs.working-directory}}/mix.lock"

  - name: Destroy cache on retry
    if: github.run_attempt != '1'
    run: |
        mix deps.clean --all
        mix clean
        rm -rf ${{inputs.working-directory}}/priv/plts
      shell: sh

  - name: Install dependencies
    if: steps.mix-build-dep-cache.outputs.cache-hit != 'true'
    run: mix deps.get
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    env:
      MIX_ENV: ${{ inputs.mix-env }}

  - name: Compile prod with warnings as errors
    run: mix compile --warnings-as-errors
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    env:
      MIX_ENV: ${{ inputs.mix-env }}

  - name: Check formatting
    run: mix format --check-formatted
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    env:
      MIX_ENV: ${{ inputs.mix-env }}

  - name: Check dependencies
    run: mix deps.unlock --check-unused
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    env:
      MIX_ENV: ${{ inputs.mix-env }}

  - name: Credo
    run: mix credo
    if: ${{ inputs.mix-env != 'prod' }}
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    env:
      MIX_ENV: ${{ inputs.mix-env }}

  - name: Dialyzer
    run: mix dialyzer
    if: ${{ inputs.mix-env != 'prod' }}
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    env:
      MIX_ENV: ${{ inputs.mix-env }}

  - name: Tests
    if: ${{ inputs.run-tests == 'True' }}
    run: mix test ${{ inputs.tests-flags }}
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    env:
      MIX_ENV: ${{ inputs.mix-env-test }}

  - name: Release
    if: ${{ inputs.release == 'True' }}
    run: mix release --overwrite
    shell: bash
    working-directory: ${{ inputs.working-directory }}
    env:
      MIX_ENV: ${{ inputs.mix-env }}

  - uses: actions/upload-artifact@v2
    if: ${{ inputs.release-upload == 'True' }}
    with:
      name: ${{ inputs.release-name }}
      path: ${{ inputs.working-directory }}/_build/${{ inputs.mix-env }}/rel
